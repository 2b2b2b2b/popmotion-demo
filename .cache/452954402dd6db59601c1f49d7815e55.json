{"dependencies":[{"name":"framesync","loc":{"line":11,"column":26}},{"name":"style-value-types","loc":{"line":12,"column":34}},{"name":"./calc","loc":{"line":13,"column":21}}],"generated":{"js":"\"use strict\";\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar framesync_1 = require(\"framesync\");\nvar style_value_types_1 = require(\"style-value-types\");\nvar calc_1 = require(\"./calc\");\nvar noop = function (v) { return v; };\nexports.appendUnit = function (unit) { return function (v) { return \"\" + v + unit; }; };\nexports.applyOffset = function (from, to) {\n    var hasReceivedFrom = true;\n    if (to === undefined) {\n        to = from;\n        hasReceivedFrom = false;\n    }\n    var getOffset = function (v) { return v - from; };\n    var applyOffsetTo = function (v) { return v + to; };\n    return function (v) {\n        if (hasReceivedFrom) {\n            return applyOffsetTo(getOffset(v));\n        }\n        else {\n            from = v;\n            hasReceivedFrom = true;\n            return to;\n        }\n    };\n};\nvar blend = function (from, to, v) {\n    var fromExpo = from * from;\n    var toExpo = to * to;\n    return Math.sqrt(v * (toExpo - fromExpo) + fromExpo);\n};\nexports.blendColor = function (from, to) {\n    var fromColor = (typeof from === 'string') ? style_value_types_1.color.parse(from) : from;\n    var toColor = (typeof to === 'string') ? style_value_types_1.color.parse(to) : to;\n    var blended = __assign({}, fromColor);\n    var blendFunc = (from.hue !== undefined ||\n        typeof from === 'string' && style_value_types_1.hsla.test(from)) ? calc_1.getValueFromProgress\n        : blend;\n    return function (v) {\n        blended = __assign({}, blended);\n        for (var key in blended) {\n            if (key !== 'alpha' && blended.hasOwnProperty(key)) {\n                blended[key] = blendFunc(fromColor[key], toColor[key], v);\n            }\n        }\n        blended.alpha = calc_1.getValueFromProgress(fromColor.alpha, toColor.alpha, v);\n        return blended;\n    };\n};\nexports.clamp = function (min, max) { return function (v) { return Math.min(Math.max(v, min), max); }; };\nvar combineFunctions = function (a, b) { return function (v) { return b(a(v)); }; };\nexports.pipe = function () {\n    var transformers = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        transformers[_i] = arguments[_i];\n    }\n    return transformers.reduce(combineFunctions);\n};\nexports.conditional = function (check, apply) { return function (v) { return check(v) ? apply(v) : v; }; };\nexports.interpolate = function (input, output, rangeEasing) {\n    var rangeLength = input.length;\n    var finalIndex = rangeLength - 1;\n    if (input[0] > input[finalIndex]) {\n        input.reverse();\n        output.reverse();\n    }\n    return function (v) {\n        if (v <= input[0]) {\n            return output[0];\n        }\n        if (v >= input[finalIndex]) {\n            return output[finalIndex];\n        }\n        var i = 1;\n        for (; i < rangeLength; i++) {\n            if (input[i] > v || i === finalIndex) {\n                break;\n            }\n        }\n        var progressInRange = calc_1.getProgressFromValue(input[i - 1], input[i], v);\n        var easedProgress = (rangeEasing) ? rangeEasing[i - 1](progressInRange) : progressInRange;\n        return calc_1.getValueFromProgress(output[i - 1], output[i], easedProgress);\n    };\n};\nexports.generateStaticSpring = function (alterDisplacement) {\n    if (alterDisplacement === void 0) { alterDisplacement = noop; }\n    return function (constant, origin) { return function (v) {\n        var displacement = origin - v;\n        var springModifiedDisplacement = -constant * (0 - alterDisplacement(Math.abs(displacement)));\n        return (displacement <= 0) ? origin + springModifiedDisplacement : origin - springModifiedDisplacement;\n    }; };\n};\nexports.linearSpring = exports.generateStaticSpring();\nexports.nonlinearSpring = exports.generateStaticSpring(Math.sqrt);\nexports.wrap = function (min, max) { return function (v) {\n    var rangeSize = max - min;\n    return ((v - min) % rangeSize + rangeSize) % rangeSize + min;\n}; };\nexports.smooth = function (strength) {\n    if (strength === void 0) { strength = 50; }\n    var previousValue = 0;\n    var lastUpdated = 0;\n    return function (v) {\n        var currentFramestamp = framesync_1.currentFrameTime();\n        var timeDelta = (currentFramestamp !== lastUpdated) ? currentFramestamp - lastUpdated : 0;\n        var newValue = timeDelta ? calc_1.smooth(v, previousValue, timeDelta, strength) : previousValue;\n        lastUpdated = currentFramestamp;\n        previousValue = newValue;\n        return newValue;\n    };\n};\nexports.snap = function (points) {\n    if (typeof points === 'number') {\n        return function (v) { return Math.round(v / points) * points; };\n    }\n    else {\n        var i_1 = 0;\n        var numPoints_1 = points.length;\n        return function (v) {\n            var lastDistance = Math.abs(points[0] - v);\n            for (i_1 = 1; i_1 < numPoints_1; i_1++) {\n                var point = points[i_1];\n                var distance = Math.abs(point - v);\n                if (distance === 0)\n                    return point;\n                if (distance > lastDistance)\n                    return points[i_1 - 1];\n                if (i_1 === numPoints_1 - 1)\n                    return point;\n                lastDistance = distance;\n            }\n        };\n    }\n};\nexports.steps = function (st, min, max) {\n    if (min === void 0) { min = 0; }\n    if (max === void 0) { max = 1; }\n    return function (v) {\n        var progress = calc_1.getProgressFromValue(min, max, v);\n        return calc_1.getValueFromProgress(min, max, calc_1.stepProgress(st, progress));\n    };\n};\nexports.transformMap = function (childTransformers) { return function (v) {\n    var output = __assign({}, v);\n    for (var key in childTransformers) {\n        if (childTransformers.hasOwnProperty(key)) {\n            var childTransformer = childTransformers[key];\n            output[key] = childTransformer(v[key]);\n        }\n    }\n    return output;\n}; };\n//# sourceMappingURL=transformers.js.map"},"hash":"7d9a9e798817daee9db21c2506f17076"}