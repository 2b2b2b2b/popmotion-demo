{"dependencies":[],"generated":{"js":"\"use strict\";\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar clamp = function (min, max) { return function (v) { return Math.max(Math.min(v, max), min); }; };\nvar contains = function (term) { return function (v) { return (typeof term === 'string' && v.indexOf(term) !== -1); }; };\nvar createUnitType = function (unit) { return ({\n    test: contains(unit),\n    parse: parseFloat,\n    transform: function (v) { return \"\" + v + unit; }\n}); };\nvar isFirstChars = function (term) { return function (v) { return (typeof term === 'string' && v.indexOf(term) === 0); }; };\nexports.getValueFromFunctionString = function (value) { return value.substring(value.indexOf('(') + 1, value.lastIndexOf(')')); };\nexports.splitCommaDelimited = function (value) { return typeof value === 'string' ? value.split(/,\\s*/) : [value]; };\nfunction splitColorValues(terms) {\n    var numTerms = terms.length;\n    return function (v) {\n        var values = {};\n        var valuesArray = exports.splitCommaDelimited(exports.getValueFromFunctionString(v));\n        for (var i = 0; i < numTerms; i++) {\n            values[terms[i]] = (valuesArray[i] !== undefined) ? parseFloat(valuesArray[i]) : 1;\n        }\n        return values;\n    };\n}\nexports.splitColorValues = splitColorValues;\nexports.number = {\n    test: function (v) { return typeof v === 'number'; },\n    parse: parseFloat,\n    transform: function (v) { return v; }\n};\nexports.alpha = __assign({}, exports.number, { transform: clamp(0, 1) });\nexports.degrees = createUnitType('deg');\nexports.percent = createUnitType('%');\nexports.px = createUnitType('px');\nexports.scale = __assign({}, exports.number, { default: 1 });\nvar FLOAT_REGEX = /(-)?(\\d[\\d\\.]*)/g;\nvar generateToken = function (token) { return '${' + token + '}'; };\nexports.complex = {\n    test: function (v) {\n        var matches = v.match && v.match(FLOAT_REGEX);\n        return (matches !== undefined && matches.constructor === Array && matches.length > 1);\n    },\n    parse: function (v) {\n        var parsedValue = {};\n        v.match(FLOAT_REGEX).forEach(function (value, i) { return parsedValue[i] = parseFloat(value); });\n        return parsedValue;\n    },\n    createTransformer: function (prop) {\n        var counter = 0;\n        var template = prop.replace(FLOAT_REGEX, function () { return generateToken(\"\" + counter++); });\n        return function (v) {\n            var output = template;\n            for (var key in v) {\n                if (v.hasOwnProperty(key)) {\n                    output = output.replace(generateToken(key), v[key].toString());\n                }\n            }\n            return output;\n        };\n    }\n};\nvar clampRgbUnit = clamp(0, 255);\nexports.rgbUnit = __assign({}, exports.number, { transform: function (v) { return Math.round(clampRgbUnit(v)); } });\nvar rgbaTemplate = function (_a) {\n    var red = _a.red, green = _a.green, blue = _a.blue, _b = _a.alpha, alpha = _b === void 0 ? 1 : _b;\n    return \"rgba(\" + red + \", \" + green + \", \" + blue + \", \" + alpha + \")\";\n};\nexports.rgba = {\n    test: isFirstChars('rgb'),\n    parse: splitColorValues(['red', 'green', 'blue', 'alpha']),\n    transform: function (_a) {\n        var red = _a.red, green = _a.green, blue = _a.blue, alpha = _a.alpha;\n        return rgbaTemplate({\n            red: exports.rgbUnit.transform(red),\n            green: exports.rgbUnit.transform(green),\n            blue: exports.rgbUnit.transform(blue),\n            alpha: alpha\n        });\n    }\n};\nvar hslaTemplate = function (_a) {\n    var hue = _a.hue, saturation = _a.saturation, lightness = _a.lightness, _b = _a.alpha, alpha = _b === void 0 ? 1 : _b;\n    return \"hsla(\" + hue + \", \" + saturation + \", \" + lightness + \", \" + alpha + \")\";\n};\nexports.hsla = {\n    test: isFirstChars('hsl'),\n    parse: splitColorValues(['hue', 'saturation', 'lightness', 'alpha']),\n    transform: function (_a) {\n        var hue = _a.hue, saturation = _a.saturation, lightness = _a.lightness, alpha = _a.alpha;\n        return hslaTemplate({\n            hue: Math.round(hue),\n            saturation: exports.percent.transform(saturation),\n            lightness: exports.percent.transform(lightness),\n            alpha: alpha\n        });\n    }\n};\nexports.hex = __assign({}, exports.rgba, { test: isFirstChars('#'), parse: function (v) {\n        var r, g, b;\n        if (v.length > 4) {\n            r = v.substr(1, 2);\n            g = v.substr(3, 2);\n            b = v.substr(5, 2);\n        }\n        else {\n            r = v.substr(1, 1);\n            g = v.substr(2, 1);\n            b = v.substr(3, 1);\n            r += r;\n            g += g;\n            b += b;\n        }\n        return {\n            red: parseInt(r, 16),\n            green: parseInt(g, 16),\n            blue: parseInt(b, 16),\n            alpha: 1\n        };\n    } });\nvar isRgba = function (v) { return v.red !== undefined; };\nvar isHsla = function (v) { return v.hue !== undefined; };\nexports.color = {\n    test: function (v) { return exports.rgba.test(v) || exports.hsla.test(v) || exports.hex.test(v); },\n    parse: function (v) {\n        if (exports.rgba.test(v)) {\n            return exports.rgba.parse(v);\n        }\n        else if (exports.hsla.test(v)) {\n            return exports.hsla.parse(v);\n        }\n        else if (exports.hex.test(v)) {\n            return exports.hex.parse(v);\n        }\n        return v;\n    },\n    transform: function (v) {\n        if (isRgba(v)) {\n            return exports.rgba.transform(v);\n        }\n        else if (isHsla(v)) {\n            return exports.hsla.transform(v);\n        }\n        return v;\n    }\n};\n//# sourceMappingURL=index.js.map"},"hash":"8bd05e562a422ee915afe61037703765"}