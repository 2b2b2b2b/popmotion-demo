{"dependencies":[{"name":"framesync","loc":{"line":3,"column":26}},{"name":"../../action","loc":{"line":4,"column":23}},{"name":"../../calc","loc":{"line":5,"column":21}},{"name":"../../easing","loc":{"line":6,"column":23}},{"name":"../../transformers","loc":{"line":7,"column":29}},{"name":"../every-frame","loc":{"line":8,"column":28}},{"name":"./scrubber","loc":{"line":9,"column":25}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar framesync_1 = require(\"framesync\");\nvar action_1 = require(\"../../action\");\nvar calc_1 = require(\"../../calc\");\nvar easing_1 = require(\"../../easing\");\nvar transformers_1 = require(\"../../transformers\");\nvar every_frame_1 = require(\"../every-frame\");\nvar scrubber_1 = require(\"./scrubber\");\nvar clampProgress = transformers_1.clamp(0, 1);\nvar tween = function (props) {\n    if (props === void 0) { props = {}; }\n    return action_1.default(function (_a) {\n        var update = _a.update, complete = _a.complete;\n        var _b = props.duration, duration = _b === void 0 ? 300 : _b, _c = props.ease, ease = _c === void 0 ? easing_1.easeOut : _c, _d = props.flip, flip = _d === void 0 ? 0 : _d, _e = props.loop, loop = _e === void 0 ? 0 : _e, _f = props.yoyo, yoyo = _f === void 0 ? 0 : _f;\n        var _g = props.from, from = _g === void 0 ? 0 : _g, _h = props.to, to = _h === void 0 ? 1 : _h, _j = props.elapsed, elapsed = _j === void 0 ? 0 : _j, _k = props.playDirection, playDirection = _k === void 0 ? 1 : _k, _l = props.flipCount, flipCount = _l === void 0 ? 0 : _l, _m = props.yoyoCount, yoyoCount = _m === void 0 ? 0 : _m, _o = props.loopCount, loopCount = _o === void 0 ? 0 : _o;\n        var playhead = scrubber_1.default({ from: from, to: to, ease: ease }).start(update);\n        var progress = 0;\n        var tweenTimer;\n        var isActive = false;\n        var reverseTween = function () { return playDirection *= -1; };\n        var isTweenComplete = function () {\n            var isComplete = (playDirection === 1)\n                ? isActive && elapsed >= duration\n                : isActive && elapsed <= 0;\n            if (!isComplete)\n                return false;\n            if (isComplete && !loop && !flip && !yoyo)\n                return true;\n            var isStepTaken = false;\n            if (loop && loopCount < loop) {\n                elapsed = 0;\n                loopCount++;\n                isStepTaken = true;\n            }\n            else if (flip && flipCount < flip) {\n                elapsed = duration - elapsed;\n                _a = [to, from], from = _a[0], to = _a[1];\n                playhead = scrubber_1.default({ from: from, to: to, ease: ease }).start(update);\n                flipCount++;\n                isStepTaken = true;\n            }\n            else if (yoyo && yoyoCount < yoyo) {\n                reverseTween();\n                yoyoCount++;\n                isStepTaken = true;\n            }\n            return !isStepTaken;\n            var _a;\n        };\n        var updateTween = function () {\n            progress = clampProgress(calc_1.getProgressFromValue(0, duration, elapsed));\n            playhead.seek(progress);\n        };\n        var startTimer = function () {\n            isActive = true;\n            tweenTimer = every_frame_1.default().start(function (i) {\n                elapsed += framesync_1.timeSinceLastFrame() * playDirection;\n                updateTween();\n                if (isTweenComplete() && complete) {\n                    tweenTimer.stop();\n                    framesync_1.onFrameUpdate(complete, true);\n                }\n            });\n        };\n        var stopTimer = function () {\n            isActive = false;\n            if (tweenTimer)\n                tweenTimer.stop();\n        };\n        startTimer();\n        return {\n            isActive: function () { return isActive; },\n            getElapsed: function () { return transformers_1.clamp(0, duration)(elapsed); },\n            getProgress: function () { return progress; },\n            stop: function () {\n                stopTimer();\n            },\n            pause: function () {\n                stopTimer();\n                return this;\n            },\n            resume: function () {\n                startTimer();\n                return this;\n            },\n            seek: function (newProgress) {\n                elapsed = calc_1.getValueFromProgress(0, duration, newProgress);\n                framesync_1.onFrameUpdate(updateTween, true);\n                return this;\n            },\n            reverse: function () {\n                reverseTween();\n                return this;\n            }\n        };\n    });\n};\nexports.default = tween;\n//# sourceMappingURL=index.js.map"},"hash":"41a12389d114c5304f96b4626fe6c1f0"}