{"dependencies":[{"name":"popmotion","loc":{"line":1,"column":53}}],"generated":{"js":"\"use strict\";\n\nvar _popmotion = require(\"popmotion\");\n\nconst { blendColor, interpolate, pipe } = _popmotion.transform;\nconst input = document.querySelector('input');\nconst counter = document.querySelector('label');\nconst charLimit = parseInt(input.getAttribute('maxlength'));\nconst counterStyler = (0, _popmotion.styler)(counter);\nconst counterScale = (0, _popmotion.value)(1, counterStyler.set('scale'));\nconst convertCharCountToColor = pipe(\n// Map character count to a 0-1 range\ninterpolate([charLimit * 0.5, charLimit], [0, 1]), v => {\n  console.log(v);\n  return v;\n},\n// Use that number to blend grey and red\nblendColor(counterStyler.get('color'), '#f00'));\n\nfunction updateRemainingCharsCounter(val) {\n  const charCount = val.length;\n\n  // Set remaining chars\n  counter.innerHTML = charLimit - charCount;\n\n  // Set counter color\n  counterStyler.set('color', convertCharCountToColor(charCount));\n}\nfunction fireSpring() {\n  (0, _popmotion.spring)({\n    // Start the animation from the current scale:\n    from: counterScale.get(),\n\n    // We want the spring to rest on 1\n    to: 1,\n\n    // We set the initial velocity to whichever the smallest is:\n    // a) counterScale's current velocity, or\n    // b) an arbitrary minimum. You can experiment.\n    velocity: Math.max(counterScale.getVelocity(), 100),\n\n    // This ratio of stiffness to damping gives a nice, tight spring. Experiment!\n    stiffness: 700,\n    damping: 180\n  }).start(counterScale);\n}\n(0, _popmotion.listen)(input, 'keydown').pipe(e => e.target.value).start(updateRemainingCharsCounter);\n\n(0, _popmotion.listen)(input, 'keydown').filter(e => e.target.value.length === charLimit).start(fireSpring);"},"hash":"8684781d9fb878ad4d2cd3f4b5bb826c"}