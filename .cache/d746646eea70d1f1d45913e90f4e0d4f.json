{"dependencies":[{"name":"../styler/utils","loc":{"line":3,"column":22}},{"name":"../css/transform-props","loc":{"line":4,"column":32}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar utils_1 = require(\"../styler/utils\");\nvar transform_props_1 = require(\"../css/transform-props\");\nvar ZERO_NOT_ZERO = 0.0000001;\nvar percentToPixels = function (percent, length) {\n    return (percent / 100) * length + 'px';\n};\nvar build = function (state, dimensions, isPath, pathLength) {\n    var hasTransform = false;\n    var hasDashArray = false;\n    var props = {};\n    var dashArrayStyles = isPath ? {\n        pathLength: '0',\n        pathSpacing: \"\" + pathLength\n    } : undefined;\n    var scale = state.scale !== undefined ? state.scale || ZERO_NOT_ZERO : state.scaleX || 1;\n    var scaleY = state.scaleY !== undefined ? state.scaleY || ZERO_NOT_ZERO : scale || 1;\n    var transformOriginX = dimensions.width * ((state.originX || 50) / 100) + dimensions.x;\n    var transformOriginY = dimensions.height * ((state.originY || 50) / 100) + dimensions.y;\n    var scaleTransformX = -transformOriginX * (scale * 1);\n    var scaleTransformY = -transformOriginY * (scaleY * 1);\n    var scaleReplaceX = transformOriginX / scale;\n    var scaleReplaceY = transformOriginY / scaleY;\n    var transform = {\n        translate: \"translate(\" + state.translateX + \", \" + state.translateY + \") \",\n        scale: \"translate(\" + scaleTransformX + \", \" + scaleTransformY + \") scale(\" + scale + \", \" + scaleY + \") translate(\" + scaleReplaceX + \", \" + scaleReplaceY + \") \",\n        rotate: \"rotate(\" + state.rotate + \", \" + transformOriginX + \", \" + transformOriginY + \") \",\n        skewX: \"skewX(\" + state.skewX + \") \",\n        skewY: \"skewY(\" + state.skewY + \") \"\n    };\n    for (var key in state) {\n        if (state.hasOwnProperty(key)) {\n            var value = state[key];\n            if (transform_props_1.isTransformProp(key)) {\n                hasTransform = true;\n            }\n            else if (isPath && (key === 'pathLength' || key === 'pathSpacing') && typeof value === 'number') {\n                hasDashArray = true;\n                dashArrayStyles[key] = percentToPixels(value, pathLength);\n            }\n            else if (isPath && key === 'pathOffset') {\n                props['stroke-dashoffset'] = percentToPixels(-value, pathLength);\n            }\n            else {\n                props[utils_1.camelToDash(key)] = value;\n            }\n        }\n    }\n    if (hasDashArray) {\n        props['stroke-dasharray'] = dashArrayStyles.pathLength + ' ' + dashArrayStyles.pathSpacing;\n    }\n    if (hasTransform) {\n        props.transform = '';\n        for (var key in transform) {\n            if (transform.hasOwnProperty(key)) {\n                var defaultValue = (key === 'scale') ? '1' : '0';\n                props.transform += transform[key].replace(/undefined/g, defaultValue);\n            }\n        }\n    }\n    return props;\n};\nexports.default = build;\n//# sourceMappingURL=build.js.map"},"hash":"ecce60916d33c2b15d0bc971afc82ef8"}