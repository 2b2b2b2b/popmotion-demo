{"dependencies":[{"name":"framesync","loc":{"line":3,"column":26}},{"name":"style-value-types","loc":{"line":4,"column":34}},{"name":"../../action","loc":{"line":5,"column":23}},{"name":"../../action/vector","loc":{"line":6,"column":23}},{"name":"../../calc","loc":{"line":7,"column":21}},{"name":"../every-frame","loc":{"line":8,"column":28}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar framesync_1 = require(\"framesync\");\nvar style_value_types_1 = require(\"style-value-types\");\nvar action_1 = require(\"../../action\");\nvar vector_1 = require(\"../../action/vector\");\nvar calc_1 = require(\"../../calc\");\nvar every_frame_1 = require(\"../every-frame\");\nvar spring = function (props) {\n    if (props === void 0) { props = {}; }\n    return action_1.default(function (_a) {\n        var update = _a.update, complete = _a.complete;\n        var _b = props.velocity, velocity = _b === void 0 ? 0.0 : _b;\n        var _c = props.from, from = _c === void 0 ? 0.0 : _c, _d = props.to, to = _d === void 0 ? 0.0 : _d, _e = props.stiffness, stiffness = _e === void 0 ? 100 : _e, _f = props.damping, damping = _f === void 0 ? 10 : _f, _g = props.mass, mass = _g === void 0 ? 1.0 : _g, _h = props.restSpeed, restSpeed = _h === void 0 ? 0.01 : _h, _j = props.restDelta, restDelta = _j === void 0 ? 0.01 : _j;\n        var initialVelocity = velocity ? -(velocity / 1000) : 0.0;\n        var t = 0;\n        var delta = to - from;\n        var position = from;\n        var prevPosition = position;\n        var springTimer = every_frame_1.default().start(function () {\n            var timeDelta = framesync_1.timeSinceLastFrame();\n            t += timeDelta;\n            var dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n            var angularFreq = Math.sqrt(stiffness / mass) / 1000;\n            prevPosition = position;\n            if (dampingRatio < 1) {\n                var envelope = Math.exp(-dampingRatio * angularFreq * t);\n                var expoDecay = angularFreq * Math.sqrt(1.0 - dampingRatio * dampingRatio);\n                position = to - envelope * ((initialVelocity + dampingRatio * angularFreq * delta)\n                    / expoDecay * Math.sin(expoDecay * t)\n                    + delta * Math.cos(expoDecay * t));\n            }\n            else {\n                var envelope = Math.exp(-angularFreq * t);\n                position = to - envelope * (delta + (initialVelocity + angularFreq * delta) * t);\n            }\n            velocity = calc_1.speedPerSecond(position - prevPosition, timeDelta);\n            var isBelowVelocityThreshold = Math.abs(velocity) <= restSpeed;\n            var isBelowDisplacementThreshold = Math.abs(to - position) <= restDelta;\n            if (isBelowVelocityThreshold && isBelowDisplacementThreshold) {\n                position = to;\n                update(position);\n                springTimer.stop();\n                complete();\n            }\n            else {\n                update(position);\n            }\n        });\n        return {\n            stop: function () { return springTimer.stop(); }\n        };\n    });\n};\nexports.default = vector_1.default(spring, {\n    from: style_value_types_1.number.test,\n    to: style_value_types_1.number.test,\n    stiffness: style_value_types_1.number.test,\n    damping: style_value_types_1.number.test,\n    mass: style_value_types_1.number.test,\n    velocity: style_value_types_1.number.test\n});\n//# sourceMappingURL=index.js.map"},"hash":"bc20a43c4256661b35c2907126242375"}