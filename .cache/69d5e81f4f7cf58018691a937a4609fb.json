{"dependencies":[{"name":"./on-next-frame","loc":{"line":3,"column":30}},{"name":"./create-render-step","loc":{"line":4,"column":35}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar on_next_frame_1 = require(\"./on-next-frame\");\nvar create_render_step_1 = require(\"./create-render-step\");\nvar HAS_PERFORMANCE_NOW = typeof performance !== 'undefined' && performance.now !== undefined;\nexports.currentTime = HAS_PERFORMANCE_NOW ? function () { return performance.now(); } : function () { return Date.now(); };\nvar willRenderNextFrame = false;\nvar MAX_ELAPSED = 40;\nvar defaultElapsed = 16.7;\nvar useDefaultElapsed = true;\nvar currentFramestamp = 0;\nvar elapsed = 0;\nfunction startRenderLoop() {\n    if (willRenderNextFrame)\n        return;\n    willRenderNextFrame = true;\n    useDefaultElapsed = true;\n    on_next_frame_1.default(processFrame);\n}\nvar frameStart = create_render_step_1.default(startRenderLoop);\nvar frameUpdate = create_render_step_1.default(startRenderLoop);\nvar frameRender = create_render_step_1.default(startRenderLoop);\nvar frameEnd = create_render_step_1.default(startRenderLoop);\nfunction processFrame(framestamp) {\n    willRenderNextFrame = false;\n    elapsed = useDefaultElapsed\n        ? defaultElapsed\n        : Math.max(Math.min(framestamp - currentFramestamp, MAX_ELAPSED), 1);\n    if (!useDefaultElapsed)\n        defaultElapsed = elapsed;\n    currentFramestamp = framestamp;\n    frameStart.process();\n    frameUpdate.process();\n    frameRender.process();\n    frameEnd.process();\n    if (willRenderNextFrame)\n        useDefaultElapsed = false;\n}\nexports.onFrameStart = frameStart.schedule;\nexports.onFrameUpdate = frameUpdate.schedule;\nexports.onFrameRender = frameRender.schedule;\nexports.onFrameEnd = frameEnd.schedule;\nexports.cancelOnFrameStart = frameStart.cancel;\nexports.cancelOnFrameUpdate = frameUpdate.cancel;\nexports.cancelOnFrameRender = frameRender.cancel;\nexports.cancelOnFrameEnd = frameEnd.cancel;\nexports.timeSinceLastFrame = function () { return elapsed; };\nexports.currentFrameTime = function () { return currentFramestamp; };\n//# sourceMappingURL=index.js.map"},"hash":"3af132d31851d37cf5a2d9b4808951e0"}