{"dependencies":[{"name":"framesync","loc":{"line":3,"column":26}},{"name":"style-value-types","loc":{"line":4,"column":34}},{"name":"../../action","loc":{"line":5,"column":23}},{"name":"../../action/vector","loc":{"line":6,"column":23}},{"name":"../../calc","loc":{"line":7,"column":21}},{"name":"../every-frame","loc":{"line":8,"column":28}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar framesync_1 = require(\"framesync\");\nvar style_value_types_1 = require(\"style-value-types\");\nvar action_1 = require(\"../../action\");\nvar vector_1 = require(\"../../action/vector\");\nvar calc_1 = require(\"../../calc\");\nvar every_frame_1 = require(\"../every-frame\");\nvar physics = function (props) {\n    if (props === void 0) { props = {}; }\n    return action_1.default(function (_a) {\n        var complete = _a.complete, update = _a.update;\n        var _b = props.acceleration, acceleration = _b === void 0 ? 0 : _b, _c = props.friction, friction = _c === void 0 ? 0 : _c, _d = props.velocity, velocity = _d === void 0 ? 0 : _d, springStrength = props.springStrength, to = props.to;\n        var _e = props.restSpeed, restSpeed = _e === void 0 ? 0.001 : _e, _f = props.from, from = _f === void 0 ? 0 : _f;\n        var current = from;\n        var timer = every_frame_1.default().start(function () {\n            var elapsed = Math.max(framesync_1.timeSinceLastFrame(), 16);\n            if (acceleration)\n                velocity += calc_1.speedPerFrame(acceleration, elapsed);\n            if (friction)\n                velocity *= Math.pow((1 - friction), (elapsed / 100));\n            if (springStrength !== undefined && to !== undefined) {\n                var distanceToTarget = to - current;\n                velocity += distanceToTarget * calc_1.speedPerFrame(springStrength, elapsed);\n            }\n            current += calc_1.speedPerFrame(velocity, elapsed);\n            update(current);\n            var isComplete = (restSpeed !== false && (!velocity || Math.abs(velocity) <= restSpeed));\n            if (isComplete) {\n                timer.stop();\n                complete();\n            }\n        });\n        return {\n            set: function (v) {\n                current = v;\n                return this;\n            },\n            setAcceleration: function (v) {\n                acceleration = v;\n                return this;\n            },\n            setFriction: function (v) {\n                friction = v;\n                return this;\n            },\n            setSpringStrength: function (v) {\n                springStrength = v;\n                return this;\n            },\n            setSpringTarget: function (v) {\n                to = v;\n                return this;\n            },\n            setVelocity: function (v) {\n                velocity = v;\n                return this;\n            },\n            stop: function () { return timer.stop(); }\n        };\n    });\n};\nexports.default = vector_1.default(physics, {\n    acceleration: style_value_types_1.number.test,\n    friction: style_value_types_1.number.test,\n    velocity: style_value_types_1.number.test,\n    from: style_value_types_1.number.test,\n    to: style_value_types_1.number.test,\n    springStrength: style_value_types_1.number.test\n});\n//# sourceMappingURL=index.js.map"},"hash":"2647cc86e3341494c2ed0d9dc77e6df8"}