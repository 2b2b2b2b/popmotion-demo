{"dependencies":[{"name":"framesync","loc":{"line":3,"column":26}},{"name":"../../action","loc":{"line":4,"column":23}},{"name":"../../calc","loc":{"line":5,"column":21}},{"name":"../listen","loc":{"line":6,"column":23}},{"name":"../pointer/utils","loc":{"line":7,"column":22}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar framesync_1 = require(\"framesync\");\nvar action_1 = require(\"../../action\");\nvar calc_1 = require(\"../../calc\");\nvar listen_1 = require(\"../listen\");\nvar utils_1 = require(\"../pointer/utils\");\nvar points = [utils_1.defaultPointerPos()];\nvar isTouchDevice = false;\nif (typeof document !== 'undefined') {\n    var updatePointsLocation = function (_a) {\n        var touches = _a.touches;\n        isTouchDevice = true;\n        var numTouches = touches.length;\n        points.length = 0;\n        for (var i = 0; i < numTouches; i++) {\n            var thisTouch = touches[i];\n            points.push(utils_1.eventToPoint(thisTouch));\n        }\n    };\n    listen_1.default(document, 'touchstart touchmove', true)\n        .start(updatePointsLocation);\n}\nvar multitouch = function (_a) {\n    var _b = _a === void 0 ? {} : _a, _c = _b.preventDefault, preventDefault = _c === void 0 ? true : _c, _d = _b.scale, scale = _d === void 0 ? 1.0 : _d, _e = _b.rotate, rotate = _e === void 0 ? 0.0 : _e;\n    return action_1.default(function (_a) {\n        var update = _a.update;\n        var output = {\n            touches: points,\n            scale: scale,\n            rotate: rotate\n        };\n        var initialDistance = 0.0;\n        var initialRotation = 0.0;\n        var isGesture = points.length > 1;\n        if (isGesture) {\n            var firstTouch = points[0], secondTouch = points[1];\n            initialDistance = calc_1.distance(firstTouch, secondTouch);\n            initialRotation = calc_1.angle(firstTouch, secondTouch);\n        }\n        var updatePoint = function () {\n            if (isGesture) {\n                var firstTouch = points[0], secondTouch = points[1];\n                var newDistance = calc_1.distance(firstTouch, secondTouch);\n                var newRotation = calc_1.angle(firstTouch, secondTouch);\n                output.scale = scale * (newDistance / initialDistance);\n                output.rotate = rotate + (newRotation - initialRotation);\n            }\n            update(output);\n        };\n        var onMove = function (e) {\n            if (preventDefault || e.touches.length > 1)\n                e.preventDefault();\n            framesync_1.onFrameUpdate(updatePoint);\n        };\n        var updateOnMove = listen_1.default(document, 'touchmove', { passive: !preventDefault })\n            .start(onMove);\n        if (isTouchDevice)\n            framesync_1.onFrameUpdate(updatePoint);\n        return {\n            stop: function () {\n                framesync_1.cancelOnFrameUpdate(updatePoint);\n                updateOnMove.stop();\n            }\n        };\n    });\n};\nexports.default = multitouch;\nexports.getIsTouchDevice = function () { return isTouchDevice; };\n//# sourceMappingURL=index.js.map"},"hash":"bed5e95d7a16916e19f19d24ba40a8b6"}