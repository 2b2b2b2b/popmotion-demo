export declare type Transformer = (v: any) => any;
export declare type ValueType = {
    test: (v: any) => boolean;
    parse: (v: any) => any;
    transform?: Transformer;
    createTransformer?: (template: string) => Transformer;
    default?: any;
};
export declare type NumberMap = {
    [key: string]: number;
};
export declare type RGBA = {
    red: number;
    green: number;
    blue: number;
    alpha?: number;
};
export declare type HSLA = {
    hue: number;
    saturation: number;
    lightness: number;
    alpha?: number;
};
export declare type Color = HSLA | RGBA;
export declare const getValueFromFunctionString: (value: string) => string;
export declare const splitCommaDelimited: (value: string) => string[];
export declare function splitColorValues(terms: string[]): (v: string) => NumberMap;
export declare const number: ValueType;
export declare const alpha: ValueType;
export declare const degrees: ValueType;
export declare const percent: ValueType;
export declare const px: ValueType;
export declare const scale: ValueType;
export declare const complex: ValueType;
export declare const rgbUnit: ValueType;
export declare const rgba: {
    test: (v: string) => boolean;
    parse: (v: string) => NumberMap;
    transform: ({red, green, blue, alpha}: RGBA) => string;
};
export declare const hsla: {
    test: (v: string) => boolean;
    parse: (v: string) => NumberMap;
    transform: ({hue, saturation, lightness, alpha}: HSLA) => string;
};
export declare const hex: {
    test: (v: string) => boolean;
    parse: (v: string) => RGBA;
    transform: ({red, green, blue, alpha}: RGBA) => string;
};
export declare const color: {
    test: (v: any) => boolean;
    parse: (v: any) => any;
    transform: (v: Color) => string;
};
